


mat3 aMatrix = mat3(aMatrixData);

float symmetricalMatricesSubspaceData[][3][3] = {
{{1, 0, 0}, {0, 0, 0},{0,0,0}},
{{0,0,1}, {0,0,0}, {1,0,0}},
{{0,0,0}, {0,0,0}, {0,0,1}}
};

std::vector<mat3> symmetricalMatricesSubspace;
for (int i = 0; i < 3; i++)
symmetricalMatricesSubspace.push_back(
mat3(symmetricalMatricesSubspaceData[i]));

cout << distanceFromSpace(symmetricalMatricesSubspace, aMatrix) << endl;


float someVectorCoords[] = { 0, 1, 1, -1, -1 };
float otherVectorCoords[] = {2, 7, 0, 4};

RealCoordinateSpace<4> someVector(otherVectorCoords);
std::vector<RealCoordinateSpace<4> > M;
for (int i = 0; i < 2; i++)
M.push_back(RealCoordinateSpace<4>(otherVectors[i]));

M = GramSchmidt(M);
for (int i = 0; i < M.size(); i++)
cout << M[i] << endl;


cout << distanceFromSpace(M, someVector) << endl;

std::vector<RealCoordinateSpace<5> > M;
for (int i = 0; i < 3; i++)
M.push_back(RealCoordinateSpace<5>(someVectors[i]));

M = GramSchmidt(M);

for (size_t i = 0; i < M.size(); i++)
cout << M[i] << endl;
cout << endl;
